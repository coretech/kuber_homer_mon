apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-conf
  namespace: kubegres-system2
data:
  primary_init_script.sh: |
    #!/bin/bash
    set -e

    # This script assumes that the env-var $POSTGRES_MYAPP_PASSWORD contains the password of the custom user to create.
    # You can add any env-var in your Kubegres resource config YAML.

    dt=$(date '+%d/%m/%Y %H:%M:%S');
    echo "$dt - Running init script the 1st time Primary PostgreSql container is created...";

    customDatabaseName="homer_config"
    customDatabaseName2="homer_data"
    customUserName="homer_user"

    echo "$dt - Running: psql -v ON_ERROR_STOP=1 --username $POSTGRES_USER --dbname $POSTGRES_DB ...";

    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    CREATE DATABASE $customDatabaseName;
    CREATE DATABASE $customDatabaseName2;
    CREATE USER $customUserName WITH PASSWORD '$POSTGRES_MYAPP_PASSWORD';
    \connect $customDatabaseName;
  
    SET statement_timeout = 0;
    SET lock_timeout = 0;
    SET idle_in_transaction_session_timeout = 0;
    SET client_encoding = 'UTF8';
    SET standard_conforming_strings = on;
    SELECT pg_catalog.set_config('search_path', '', false);
    SET check_function_bodies = false;
    SET xmloption = content;
    SET client_min_messages = warning;
    SET row_security = off;
    SET default_tablespace = '';
    SET default_table_access_method = heap;


    CREATE TABLE public.agent_location_session (
       id integer NOT NULL,
       guid uuid,
       gid integer,
       host character varying(250) DEFAULT '127.0.0.1'::character varying,
       port integer DEFAULT 8080,
       protocol character varying(50) DEFAULT 'log'::character varying,
       path character varying(250) DEFAULT '/api/search'::character varying,
       node character varying(100) DEFAULT 'testnode'::character varying,
       type character varying(200) DEFAULT 'type'::character varying,
       create_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
       expire_date timestamp with time zone NOT NULL,
       active integer DEFAULT 1
    );



    CREATE SEQUENCE public.agent_location_session_id_seq
       AS integer
       START WITH 1
       INCREMENT BY 1
       NO MINVALUE
       NO MAXVALUE
       CACHE 1;


    CREATE TABLE public.alias (
        id integer NOT NULL,
        guid uuid,
        alias character varying(40),
        ip character varying(60),
        port integer DEFAULT 0,
        mask integer,
        "captureID" character varying(20),
        status boolean,
        create_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
    );


    CREATE SEQUENCE public.alias_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    CREATE TABLE public.applications (
        id integer NOT NULL,
        guid uuid,
        name character varying(50) NOT NULL,
        host character varying(100) NOT NULL,
        version character varying(100) NOT NULL,
        created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
    );


    CREATE SEQUENCE public.applications_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;

    CREATE TABLE public.auth_token (
        id integer NOT NULL,
        guid uuid,
        creator_guid uuid,
        name character varying(100),
        token character varying(250),
        user_object json,
        ip_address inet,
        create_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
        lastusage_date timestamp with time zone NOT NULL,
        expire_date timestamp with time zone NOT NULL,
        usage_calls integer DEFAULT 1,
        limit_calls integer DEFAULT 1000,
        active boolean
    );


    CREATE SEQUENCE public.auth_token_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    CREATE TABLE public.global_settings (
        id integer NOT NULL,
        guid uuid,
        partid integer NOT NULL,
        category character varying(100) NOT NULL,
        create_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
        param character varying(100) NOT NULL,
        data json
    );


    CREATE SEQUENCE public.global_settings_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;



    CREATE TABLE public.hepsub_mapping_schema (
        id integer NOT NULL,
        guid uuid,
        profile character varying(100),
        hepid character varying(250),
        hep_alias character varying(250),
        version character varying(50),
        mapping jsonb,
        create_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
    );



    CREATE SEQUENCE public.hepsub_mapping_schema_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;

    CREATE TABLE public.mapping_schema (
        id integer NOT NULL,
        guid uuid,
        profile character varying(100) NOT NULL,
        hepid integer NOT NULL,
        hep_alias character varying(100),
        partid integer NOT NULL,
        version integer NOT NULL,
        retention integer NOT NULL,
        partition_step integer NOT NULL,
        create_index json DEFAULT '{}'::json,
        create_table text DEFAULT 'CREATE TABLE'::text,
        correlation_mapping json DEFAULT '{}'::json,
        fields_mapping json DEFAULT '{}'::json,
        mapping_settings json DEFAULT '{}'::json,
        schema_mapping json DEFAULT '{}'::json,
        schema_settings json DEFAULT '{}'::json,
        create_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
      );

    CREATE SEQUENCE public.mapping_schema_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;

    CREATE TABLE public.user_settings (
        id integer NOT NULL,
        guid uuid,
        username character varying(100) NOT NULL,
        partid integer NOT NULL,
        category character varying(100) NOT NULL,
        create_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
        param character varying(100) NOT NULL,
        data json
    );


    CREATE SEQUENCE public.user_settings_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;



    CREATE TABLE public.users (
        id integer NOT NULL,
        username character varying(100) NOT NULL,
        partid integer DEFAULT 10 NOT NULL,
        email character varying(250) NOT NULL,
        firstname character varying(50) NOT NULL,
        lastname character varying(50) NOT NULL,
        department character varying(50) NOT NULL,
        usergroup character varying(250) NOT NULL,
        hash character varying(128) NOT NULL,
        guid character varying(50) NOT NULL,
        created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
    );

    CREATE SEQUENCE public.users_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;


    CREATE TABLE public.versions (
       id integer NOT NULL,
       table_name character varying(50) NOT NULL,
       table_version integer DEFAULT 10 NOT NULL,
       created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
    );


    CREATE SEQUENCE public.versions_id_seq
        AS integer
        START WITH 1
        INCREMENT BY 1
        NO MINVALUE
        NO MAXVALUE
        CACHE 1;



    
    GRANT ALL PRIVILEGES ON DATABASE "$customDatabaseName" to $customUserName;
    GRANT ALL PRIVILEGES ON DATABASE "$customDatabaseName2" to $customUserName;
    GRANT ALL ON "account" to $customUserName;
    EOSQL

    echo "$dt - Init script is completed";
